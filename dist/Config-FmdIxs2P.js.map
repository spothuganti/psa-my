{"version":3,"file":"Config-FmdIxs2P.js","sources":["../src/types/Config.ts"],"sourcesContent":["import type { ImportString, PageContextServer, PageContext, PageContextClient } from 'vike/types'\r\nimport type { TagAttributes } from '../utils/getTagAttributesString'\r\nimport type { Viewport } from '../integration/onRenderHtml'\r\nimport type { ConfigsCumulative } from '../hooks/useConfig/configsCumulative'\r\nimport type { Component } from './PageContext'\r\nimport type {\r\n  OnCreateAppSync,\r\n  OnCreateAppAsync,\r\n  OnBeforeRenderHtmlSync,\r\n  OnBeforeRenderHtmlAsync,\r\n  OnAfterRenderHtmlSync,\r\n  OnAfterRenderHtmlAsync,\r\n  OnBeforeRenderClientSync,\r\n  OnBeforeRenderClientAsync,\r\n} from './VikeHooks'\r\n\r\n// https://vike.dev/pageContext#typescript\r\ndeclare global {\r\n  namespace Vike {\r\n    interface Config {\r\n      /**\r\n       * Add arbitrary `<head>` tags.\r\n       *\r\n       * https://vike.dev/Head\r\n       */\r\n      Head?: Component\r\n\r\n      /**\r\n       * A component that defines the visual layout common to several pages.\r\n       *\r\n       * Technically: the `<Layout>` component wraps the root component `<Page>`.\r\n       *\r\n       * https://vike.dev/Layout\r\n       */\r\n      Layout?: Component\r\n\r\n      /**\r\n       * Set the page's tilte.\r\n       *\r\n       * Generates:\r\n       * ```jsx\r\n       * <head>\r\n       *   <title>{title}</title>\r\n       *   <meta property=\"og:title\" content={title} />\r\n       * </head>\r\n       * ```\r\n       *\r\n       * https://vike.dev/title\r\n       */\r\n      title?: string | null | ((pageContext: PageContext_) => string | null | undefined)\r\n\r\n      /**\r\n       * Set the page's description.\r\n       *\r\n       * Generates:\r\n       * ```jsx\r\n       * <head>\r\n       *   <meta name=\"description\" content={description}>\r\n       *   <meta property=\"og:description\" content={description}>\r\n       * </head>\r\n       * ```\r\n       *\r\n       * https://vike.dev/description\r\n       */\r\n      description?: string | null | ((pageContext: PageContextServer) => string | null | undefined)\r\n\r\n      /**\r\n       * Set the page's preview image upon URL sharing.\r\n       *\r\n       * Generates:\r\n       * ```jsx\r\n       * <head>\r\n       *   <meta property=\"og:image\" content={image}>\r\n       *   <meta name=\"twitter:card\" content=\"summary_large_image\">\r\n       * </head>\r\n       * ```\r\n       *\r\n       * https://vike.dev/image\r\n       */\r\n      image?: string | null | ((pageContext: PageContextServer) => string | null | undefined)\r\n\r\n      /**\r\n       * Set the page's width shown to the user on mobile/tablet devices.\r\n       *\r\n       * @default \"responsive\"\r\n       *\r\n       * https://vike.dev/viewport\r\n       */\r\n      viewport?: Viewport | ((pageContext: PageContextServer) => Viewport | undefined)\r\n\r\n      /**\r\n       * Set the page's favicon.\r\n       *\r\n       * Generates:\r\n       * ```jsx\r\n       * <head>\r\n       *   <link rel=\"icon\" href={favicon} />\r\n       * </head>\r\n       * ```\r\n       *\r\n       * https://vike.dev/favicon\r\n       */\r\n      favicon?: string | null | ((pageContext: PageContextServer) => string | null | undefined)\r\n\r\n      /**\r\n       * Set the page's language (`<html lang>`).\r\n       *\r\n       * @default 'en'\r\n       *\r\n       * https://vike.dev/lang\r\n       */\r\n      lang?: string | null | ((pageContext: PageContext_) => string | null | undefined)\r\n\r\n      /**\r\n       * Add tag attributes such as `<html class=\"dark\">`.\r\n       *\r\n       * https://vike.dev/htmlAttributes\r\n       */\r\n      htmlAttributes?: TagAttributes | ((pageContext: PageContextServer) => TagAttributes | undefined)\r\n\r\n      /**\r\n       * Add tag attributes such as `<body class=\"dark\">`.\r\n       *\r\n       * https://vike.dev/bodyAttributes\r\n       */\r\n      bodyAttributes?: TagAttributes | ((pageContext: PageContextServer) => TagAttributes | undefined)\r\n\r\n      /**\r\n       * If `true`, the page is rendered twice: on the server-side (to HTML) and on the client-side (hydration).\r\n       *\r\n       * If `false`, the page is rendered only once in the browser.\r\n       *\r\n       * @default true\r\n       *\r\n       * https://vike.dev/ssr\r\n       */\r\n      ssr?: boolean\r\n\r\n      /**\r\n       * Enable or disable HTML Streaming.\r\n       *\r\n       * https://vike.dev/stream\r\n       */\r\n      stream?: boolean | 'node' | 'web'\r\n\r\n      /**\r\n       * The page's root Vue component.\r\n       *\r\n       * https://vike.dev/Page\r\n       */\r\n      Page?: Component\r\n\r\n      /**\r\n       * Raw HTML injected at the start of `<body>`.\r\n       *\r\n       * https://vike.dev/bodyHtmlBegin\r\n       */\r\n      bodyHtmlBegin?: BodyHtmlBoundary\r\n\r\n      /**\r\n       * Raw HTML injected at the end of `<body>`.\r\n       *\r\n       * @default `<div id=\"teleported\"></div>`\r\n       *\r\n       * https://vike.dev/bodyHtmlEnd\r\n       */\r\n      bodyHtmlEnd?: BodyHtmlBoundary\r\n\r\n      /**\r\n       * Hook called right after creating Vue's `app` instance.\r\n       *\r\n       * Typically used for registering Vue plugins.\r\n       *\r\n       * https://vike.dev/onCreateApp\r\n       */\r\n      onCreateApp?: OnCreateAppSync | OnCreateAppAsync | ImportString\r\n\r\n      /**\r\n       * Hook called right before rendering the page's root Vue component to HTML.\r\n       *\r\n       * https://vike.dev/onBeforeRenderHtml\r\n       */\r\n      onBeforeRenderHtml?: OnBeforeRenderHtmlSync | OnBeforeRenderHtmlAsync | ImportString\r\n\r\n      /**\r\n       * Hook called right after rendering the page's root Vue component to HTML.\r\n       *\r\n       * https://vike.dev/onAfterRenderHtml\r\n       */\r\n      onAfterRenderHtml?: OnAfterRenderHtmlSync | OnAfterRenderHtmlAsync | ImportString\r\n\r\n      /**\r\n       * Hook called right before mounting the page's root Vue component.\r\n       *\r\n       * Typically used for hydrating state management libraries.\r\n       *\r\n       * https://vike.dev/onBeforeRenderClient\r\n       */\r\n      onBeforeRenderClient?: OnBeforeRenderClientSync | OnBeforeRenderClientAsync | ImportString\r\n\r\n      /**\r\n       * Client-side hook called after the page is rendered.\r\n       *\r\n       * https://vike.dev/onAfterRenderClient\r\n       */\r\n      onAfterRenderClient?: (pageContext: PageContextClient) => void\r\n    }\r\n    interface ConfigResolved {\r\n      onCreateApp?: Array<OnCreateAppSync | OnCreateAppAsync>\r\n      onBeforeRenderHtml?: Array<OnBeforeRenderHtmlSync | OnBeforeRenderHtmlAsync>\r\n      onAfterRenderHtml?: Array<OnAfterRenderHtmlSync | OnAfterRenderHtmlAsync>\r\n      onBeforeRenderClient?: Array<OnBeforeRenderClientSync | OnBeforeRenderClientAsync>\r\n      onAfterRenderClient?: Function[]\r\n      bodyHtmlBegin?: BodyHtmlBoundary[]\r\n      bodyHtmlEnd?: BodyHtmlBoundary[]\r\n      Layout?: Component[]\r\n      Head?: Component[]\r\n      bodyAttributes?: TagAttributes[]\r\n      htmlAttributes?: TagAttributes[]\r\n    }\r\n  }\r\n}\r\n\r\nexport type __FakeExport_Config = never\r\n\r\n// Be able to reference it from within `namespace Vike`\r\n// - https://stackoverflow.com/questions/46559021/typescript-use-of-global-type-inside-namespace-with-same-type\r\n// - https://github.com/Microsoft/TypeScript/issues/983\r\ntype PageContext_ = PageContext\r\n\r\ntype BodyHtmlBoundary = string | ((pageContext: PageContext) => string)\r\n\r\n// JSDocs are preserved\r\ntype PickWithoutGetter<T, K extends keyof T> = {\r\n  [P in K]: Exclude<T[P], Function>\r\n}\r\nexport const configsFromHook = [\r\n  'Head',\r\n  'title',\r\n  'description',\r\n  'image',\r\n  'favicon',\r\n  'lang',\r\n  'viewport',\r\n  'bodyAttributes',\r\n  'htmlAttributes',\r\n] as const\r\ntype ConfigsFromHook = (typeof configsFromHook)[number]\r\nexport type ConfigFromHook = PickWithoutGetter<Vike.Config, ConfigsFromHook>\r\nexport type ConfigFromHookResolved = Omit<ConfigFromHook, ConfigsCumulative> &\r\n  Pick<Vike.ConfigResolved, ConfigsCumulative>\r\n"],"names":[],"mappings":"AA4OO,MAAM,kBAAkB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;"}