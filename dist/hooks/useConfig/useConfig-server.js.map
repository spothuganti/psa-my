{"version":3,"file":"useConfig-server.js","sources":["../../../src/utils/objectKeys.ts","../../../src/hooks/useConfig/useConfig-server.ts"],"sourcesContent":["// https://stackoverflow.com/questions/52856496/typescript-object-keys-return-string\r\n// https://github.com/sindresorhus/ts-extras/blob/main/source/object-keys.ts\r\n/** Same as Object.keys() but with type inference */\r\nexport function objectKeys<T extends object>(obj: T): (keyof T)[] {\r\n  return Object.keys(obj) as any\r\n}\r\n","export { useConfig }\r\n\r\nimport type { PageContext } from 'vike/types'\r\nimport type { PageContextInternal } from '../../types/PageContext.js'\r\nimport type { ConfigFromHook } from '../../types/Config.js'\r\nimport { usePageContext } from '../usePageContext.js'\r\nimport { getPageContext } from 'vike/getPageContext'\r\nimport { objectKeys } from '../../utils/objectKeys.js'\r\nimport { includes } from '../../utils/includes.js'\r\nimport { configsCumulative } from './configsCumulative.js'\r\n\r\n/**\r\n * Set configurations inside components and Vike hooks.\r\n *\r\n * https://vike.dev/useConfig\r\n */\r\nfunction useConfig(): (config: ConfigFromHook) => void {\r\n  // Vike hook\r\n  let pageContext = getPageContext() as PageContext & PageContextInternal\r\n  if (pageContext) return (config: ConfigFromHook) => setPageContextConfigFromHook(config, pageContext)\r\n\r\n  // Component\r\n  pageContext = usePageContext()\r\n  return (config: ConfigFromHook) => {\r\n    if (!pageContext._headAlreadySetWrapper?.val) {\r\n      setPageContextConfigFromHook(config, pageContext)\r\n    } else {\r\n      throw new Error(\"Using useConfig() with HTML streaming isn't supported yet\")\r\n    }\r\n  }\r\n}\r\n\r\nconst configsClientSide = ['title']\r\nfunction setPageContextConfigFromHook(config: ConfigFromHook, pageContext: PageContext & PageContextInternal) {\r\n  pageContext._configFromHook ??= {}\r\n  objectKeys(config).forEach((configName) => {\r\n    // Skip HTML only configs which the client-side doesn't need, saving KBs sent to the client as well as avoiding serialization errors.\r\n    if (pageContext.isClientSideNavigation && !configsClientSide.includes(configName)) return\r\n\r\n    if (!includes(configsCumulative, configName)) {\r\n      // Overridable config\r\n      const configValue = config[configName]\r\n      if (configValue === undefined) return\r\n      pageContext._configFromHook![configName] = configValue as any\r\n    } else {\r\n      // Cumulative config\r\n      const configValue = config[configName]\r\n      if (!configValue) return\r\n      pageContext._configFromHook![configName] ??= []\r\n      pageContext._configFromHook![configName].push(configValue as any)\r\n    }\r\n  })\r\n}\r\n"],"names":[],"mappings":";;;AAGO,SAAS,WAA6B,KAAqB;AACzD,SAAA,OAAO,KAAK,GAAG;AACxB;ACWA,SAAS,YAA8C;AAErD,MAAI,cAAc;AAClB,MAAI,YAAoB,QAAA,CAAC,WAA2B,6BAA6B,QAAQ,WAAW;AAGpG,gBAAc,eAAe;AAC7B,SAAO,CAAC,WAA2B;;AAC7B,QAAA,GAAC,iBAAY,2BAAZ,mBAAoC,MAAK;AAC5C,mCAA6B,QAAQ,WAAW;AAAA,IAAA,OAC3C;AACC,YAAA,IAAI,MAAM,2DAA2D;AAAA,IAC7E;AAAA,EAAA;AAEJ;AAEA,MAAM,oBAAoB,CAAC,OAAO;AAClC,SAAS,6BAA6B,QAAwB,aAAgD;AAC5G,cAAY,oBAAZ,YAAY,kBAAoB;AAChC,aAAW,MAAM,EAAE,QAAQ,CAAC,eAAe;;AAEzC,QAAI,YAAY,0BAA0B,CAAC,kBAAkB,SAAS,UAAU,EAAG;AAEnF,QAAI,CAAC,SAAS,mBAAmB,UAAU,GAAG;AAEtC,YAAA,cAAc,OAAO,UAAU;AACrC,UAAI,gBAAgB,OAAW;AACnB,kBAAA,gBAAiB,UAAU,IAAI;AAAA,IAAA,OACtC;AAEC,YAAA,cAAc,OAAO,UAAU;AACrC,UAAI,CAAC,YAAa;AACN,wBAAA,iBAAA,iCAAiC;AAC7C,kBAAY,gBAAiB,UAAU,EAAE,KAAK,WAAkB;AAAA,IAClE;AAAA,EAAA,CACD;AACH;"}